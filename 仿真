package cellmachine;

import javax.swing.JFrame;
import java.util.ArrayList;
import java.util.List;
import cell.Cell;
import animal.Animal;
import animal.Fox;
import animal.Rabit;
import field.Field;
import field.Location;
import field.View;


public class CellMachine {

	public static void main(String[] args) {
		CellMachine a=new CellMachine();
		Field field = new Field(30,30);		
		for ( int row = 0; row<field.getHeight(); row++ ) {
			for ( int col = 0; col<field.getWidth(); col++ ) {
				Cell cell = field.get(row, col);
				if ( Math.random() < 0.01 ) {
					field.place(row,col,new Fox());
				}
				else if(Math.random() < 0.1)
				{
					field.place(row,col,new Rabit());
				}
			}
		}
		View view = new View(field);
		JFrame frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setTitle("Cells");
		frame.add(view);
		frame.pack();
		frame.setVisible(true);
		
		for ( int i=0; i<1000; i++ ) {
			for ( int row = 0; row<field.getHeight(); row++ ) {
				for ( int col = 0; col<field.getWidth(); col++ ) {
					Cell cell=field.get(row, col);
					if(cell!=null)
					{
					Animal animal=(Animal)cell;
					animal.grow();
					System.out.println(animal);
					if(animal.alive())
					{
						Location[] freeadj=field.getnear(row, col);
						if(freeadj.length>0)
						{
						Location loc=animal.move(row, col, freeadj);
						if(loc!=null&&field.get(loc.getrow(),loc.getcol())==null)//用get而不是把二维数组设为public
						{
						field.move(row, col, loc);
						}
						}
						
						Cell[] neighbers=field.getNeighbour(row, col);
						List<Animal> list=new ArrayList<Animal>();
						for(Cell c:neighbers) {
							if(c instanceof Rabit)
							{
								list.add((Rabit)c);
							}
						}
						if(!list.isEmpty())
						{
							Animal b=animal.feed(list);
							if(b!=null)
							{
								field.clear((Cell)b);
							}
						}
							Animal baby=animal.breed();
						if(baby!=null)
						{
							field.placeRandomAdj(row, col, (Cell)baby);
						}						
					}
					else {
						field.clear(cell);
					}
					}
					
				}
			}
			frame.repaint();
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

}







package field;

import java.util.ArrayList;
import java.util.List;

import cell.Cell;

public class Field {
	private int width;
	private int height;
	private Cell[][] cell;
	private static final Location[] nearlocation= {
			new Location(-1, 1),new Location(0, 1),new Location(1, 1),
			   new Location(-1, 0),new Location(0, 0),new Location(0, 1),
			   new Location(-1, -1),new Location(0, -1),new Location(-1, -1)
	};
	
	public Field(int width, int height) {
		this.width = width;
		this.height = height;
		cell = new Cell[height][width];
	}
	
	public int getWidth() { return width; }
	public int getHeight() { return height; }
	
	public void place(int row, int col, Cell o) {
		
		cell[row][col] = o;
		
	}
	
	public Cell get(int row, int col) {
		return cell[row][col];
	}
	
	public Cell[] getNeighbour(int row1, int col1)
	{
		List<Cell> list=new ArrayList<Cell>();
		for(Location loc:nearlocation)
		{
			int row=row1+loc.getrow();
			int col=col1+loc.getcol();
			if(col>-1&&row>-1&&col<height&&row<height&&cell[row][col]!=null&&(row!=row1&&col!=col1))
			{
			list.add(cell[row][col]);
			}
		}
		return list.toArray(new Cell[list.size()]);
	}
	public Location[] getnear(int row1, int col1)
	{
		List<Location> list=new ArrayList<Location>();
		for(Location loc:nearlocation)
		{
			int row=row1+loc.getrow();
			int col=col1+loc.getcol();
			if(col>-1&&row>-1&&col<height&&row<height&&(row!=row1&&col!=col1))
			{
			list.add(new Location(row,col));
			}
		}
		return list.toArray(new Location[list.size()]);
	}
	
	public void clear(int i,int j) {
			cell[i][j] = null;
			}
	public void clear(Cell cells) 
	{
		
	for ( int i=0; i<height; i++ ) 
	{
		for ( int j=0; j<width; j++ )
		{
			if(cell[i][j]==cells)
			{
				cell[i][j] = null;
			}
			
		}
	}	
	}
	public void placeRandomAdj(int row, int col, Cell celll)
	{
		Location[] adj=this.getnear(row, col);
		if(adj.length>0)
		{
		int index=(int)(Math.random()*adj.length);
		cell[adj[index].getrow()][adj[index].getcol()]=celll;
		}
		
	}
	public void move(int row, int col, Location loc)
	{
		cell[loc.getrow()][loc.getcol()]=cell[row][col];
		cell[row][col]=null;
	}
	
}






package field;

public class Location {
	private int row,col;
	public Location(int col,int row)
	{
		this.row=row;
		this.col=col;
	}
	public int getrow()
	{
		return  row;
	}
	public int getcol()
	{
		return col;
}
}




package animal;

import java.awt.Color;
import java.awt.Graphics;

import cell.Cell;

public class Rabit extends Animal implements Cell{
	public Rabit() {
		super(10,2);
	}	
	public Animal breed() {
		Animal ret = null;
		  if(Math.random() < 0.2) {
		   ret = new Rabit();
		  }
		  return ret;
		
	}
	public void draw(Graphics g, int x, int y, int size)
	{
		int alpha = (int)((1 - this.agepercent()) * 255);
		  g.setColor(new Color(255, 0, 0, alpha));
		  g.fillRect(x, y, size, size);
	}
	public String toString()
	{
		return "rabit"+super.toString();
	}
}





package animal;

import java.awt.Color;
import java.awt.Graphics;
import java.util.List;

import cell.Cell;

public class Fox extends Animal implements Cell{

	public Fox() {
		super(20,4);
	}
	public Animal feed(List<Animal> fed)
	{
		Animal ret=null;
		if(Math.random() < 0.4) {
			ret=fed.get((int) (Math.random()*fed.size()));
			this.longerLife();
		}			
		return ret;
		
	}
	@Override
	public Animal breed() {
		Animal ret = null;
		  if(Math.random() < 0.15) {
		   ret = new Fox();
		  }
		  return ret;		
	}
	
	public String toString()
	{
		return "fox"+super.toString();
	}
	public void draw(Graphics g, int x, int y, int size)
	{
		int alpha = (int)((1 - this.agepercent()) * 255);
		  g.setColor(new Color(0, 0, 0, alpha));
		  g.fillRect(x, y, size, size);
	}
}







package field;

import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;

import cell.Cell;

public class View extends JPanel {
	private static final int GIRD_SIZE = 16;
	private Field field;
	
	public View(Field field) {
		this.field = field;
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		for(int row = 0; row < field.getHeight(); row ++) {
			   g.drawLine(0, row * GIRD_SIZE, field.getWidth() * GIRD_SIZE, row * GIRD_SIZE);
			  }
			  for(int col = 0; col < field.getWidth(); col ++) {
			   g.drawLine(col*GIRD_SIZE ,0,col*GIRD_SIZE,field.getHeight()* GIRD_SIZE);
			  }
			  for(int row = 0; row < field.getHeight(); row ++) {
				   for(int col = 0; col < field.getWidth(); col ++) {
					   Cell cell=field.get(row, col);
					   if(cell!=null)
					   {
						   cell.draw(g,row*GIRD_SIZE, col*GIRD_SIZE, GIRD_SIZE);
					   }
				   }
			  }
	}

	@Override
	public Dimension getPreferredSize() {
		return new Dimension(field.getWidth()*GIRD_SIZE+1, field.getHeight()*GIRD_SIZE+1);
	}
	public static void main(String[] args) {	
	}

}






package cell;

import java.awt.Graphics;

public interface Cell {
	void draw(Graphics g, int x, int y, int size);
}





package animal;

import java.util.List;
import cell.Cell;
import field.Location;
public abstract class Animal implements Cell{
private int upage;
private int breadage;
private int age=0;
private boolean isalive=true;
Animal(int upage,int breadage)
{
	this.upage=upage;
	this.breadage=breadage;
}
public void grow()
{
	age++;
	if(age>=upage)
	{
		this.die();
	}
	
}
public boolean alive()
{
	return isalive;
}
public double agepercent()
{
	return (double)age/upage;
}
public void die()
{
	this.isalive=false;
}
public Location move(int row,int col,Location[] freeadj)
{
	Location ret=null;
	if(Math.random()<0.12&&freeadj.length>0)
	{
		ret=freeadj[(int)(Math.random()*freeadj.length)];		
	}
	return ret;
}
public Animal feed(List<Animal> fed)
{
	return null;
}
public abstract Animal breed();
public void longerLife() {
	  upage++;
	 }	 
	 @Override
	 public String toString() {
	  return "" + age + " : " + (this.isalive ? "isAlive" : "dead");
	 }
}






















